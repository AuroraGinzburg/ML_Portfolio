{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7d2882e6",
   "metadata": {},
   "source": [
    "Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9695f758",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.set_style('whitegrid')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a60753c",
   "metadata": {},
   "source": [
    "Read CSV and save as a data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "225ffdc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('911.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a6d36fa",
   "metadata": {},
   "source": [
    "Useful calls for data frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4df542db",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df.info()\n",
    "\n",
    "df.head()\n",
    "#Useful for quick checks on it modifications to your df worked. Arg = #rows shown\n",
    "\n",
    "df['zip'].value_counts() \n",
    "#for top five + .head()\n",
    "\n",
    "df['title'].nunique()\n",
    "\n",
    "df.idxmin()\n",
    "#returns the indeces where column values were the minimum \n",
    "#min can be changed to max\n",
    "#df['col1'].argmin() for each column also works\n",
    "\n",
    "df.loc['startindex': 'endindex'].std()\n",
    "#returning the standard dev over a slice of the rows\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f39cc89",
   "metadata": {},
   "source": [
    "Creating new features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4e83e6b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "nameme=pd.DataFrame()\n",
    "#create new, empty, DF\n",
    "\n",
    "df['Reason'] = df['title'].apply(lambda x: x.split(':')[0])\n",
    "#creating new reason column based on the first part of the 'title' column value (e.g., EMS: BACK PAINS/INJURY )\n",
    "\n",
    "df['Date'] = df['timeStamp'].apply(lambda x: x.date())\n",
    "#Create a new column called that contains the date from the timeStamp column. \n",
    "\n",
    "df2['Returns'] = df1['forloopnums']['col1'].pct_change()\n",
    "#Creating a new column in a second df for the %change in 'col1'. 'col1' is in a multi-level index with 'forloopnums' number of instances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5541751f",
   "metadata": {},
   "outputs": [],
   "source": [
    "byMonth = df.groupby('Month').count()\n",
    "#creating a new groupby object and calling .count() to aggregate\n",
    "\n",
    "\n",
    "dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\n",
    "#Restructure  dataframe so that the columns become the Hours (currently 1 column) and the Index becomes the Day of the Week (currently one column)\n",
    "#unstack takes a multi-level index DF and turns it into matrix form by turning 1 index into column and 1 into index\n",
    "#by[-1] becomes the new column values with unstack method\n",
    "#May need df.set_index('Day of Week', inplace= True) to change index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "026413ed",
   "metadata": {},
   "source": [
    "Column object types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dc5691e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df.info()\n",
    "#Check types on all columns\n",
    "type(df['timeStamp'][0])\n",
    "#Check type on a specific items in a column\n",
    "\n",
    "df['timeStamp'] = pd.to_datetime(df['timeStamp'])\n",
    "#reset column to convert the values from strings to DateTime objects\n",
    "\n",
    "df['Day of Week'] = df['Day of Week'].map({0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'})\n",
    "#Convert a columnn of #s to strings with a dictionary\n",
    "\n",
    "x.date()\n",
    "#Timestamp contains the date and time so if you just want the date convert it to a date "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bfec99a",
   "metadata": {},
   "source": [
    "Grabbing attributes off a DateTime object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "defb444b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\n",
    "#Creating new hour column using an attribute of the value in the timestamp column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bd61317",
   "metadata": {},
   "source": [
    "<b>Data Viz</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0139c693",
   "metadata": {},
   "outputs": [],
   "source": [
    "#optional imports\n",
    "import plotly\n",
    "import cufflinks as cf\n",
    "cf.go_offline()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d64c8fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.tight_layout()\n",
    "#make plot prettier\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "#can add in cell with sns code\n",
    "\n",
    "byMonth['twp'].plot()\n",
    "#creating a simple plot of a dataframe column (the DF is a groupby obj here) \n",
    "\n",
    "sns.countplot(x = 'Reason', data=df)\n",
    "#use seaborn to create a countplot of 911 calls by Reason\n",
    "\n",
    "sns.countplot(x = 'Day of Week', data = df, hue = 'Reason', palette='viridis')\n",
    "#use seaborn to create a countplot of 1 column with the hue based off of a second column\n",
    "\n",
    "sns.histplot(msdata, kde=True, bins=50)\n",
    "#a distribution plot. msdata=df['col1'].loc[start:end]\n",
    "\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "#place legend outside the chart\n",
    "\n",
    "sns.lmplot( x ='Month', y= 'twp', data = byMonth.reset_index()) \n",
    "#seaborn linear model plot that is also resetting the index to make the month a column/not index. \n",
    "#reset_index() only necessary if the x or y value is a current index\n",
    "\n",
    "df.groupby('Date').count()['twp'].plot(lw = 2)\n",
    "#groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.\n",
    "#Some difference between column values because not every call has all the information put in, so you choose one column value(e.g., ['twp'])\n",
    "\n",
    "df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot(Title = 'Traffic')\n",
    "#Use conditional selection to plot only the rows where reason==traffic\n",
    "\n",
    "closepcorr= closep.corr()\n",
    "#building correlation DF\n",
    "#closep is a DF (can be sliced parts of a DF) with columns we want to correlate against one another (for a heatmap)\n",
    "#pass closepcorr into the arg of the heatmap\n",
    "\n",
    "sns.heatmap(dayHour, cmap='viridis')\n",
    "#dayHour must be a dataframe in matrix form (e.g., pivot table)\n",
    "#In matrix form, every cell is a value at the x,y position\n",
    "\n",
    "sns.clustermap(dayHour, cmap='coolwarm')\n",
    "#dayHour is in matrix form\n",
    "\n",
    "sns.pairplot(returns[1:])\n",
    "#create a pairplot of a df starting at index=1\n",
    "\n",
    "df.xs('col1', axis = 1, level='level1').iplot()\n",
    "# Use plotly and cufflinks to create a line plot for a cross-section of a multi-level DF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61a792ed",
   "metadata": {},
   "source": [
    "Grabbing stock data from online\n",
    "\n",
    "https://pandas-datareader.readthedocs.io/en/latest/remote_data.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0232fd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas_datareader import data, wb\n",
    "import datetime\n",
    "\n",
    "start = pd.to_datetime('01-01-2006')\n",
    "#Use datetime to set start and end datetime objects\n",
    "\n",
    "BAC=data.DataReader('BAC', 'yahoo', start, end)\n",
    "#Use datareader to grab info on the stock.\n",
    "\n",
    "tickers = 'BAC C GS JPM MS WFC'\n",
    "tickers = tickers.split()\n",
    "#Create a list of the column categories you want on the top level (as strings). \n",
    "\n",
    "bank_stocks = pd.concat( [BAC, C, GS, JPM, MS, WFC], axis=1, keys=tickers)\n",
    "#keys= list of column categories\n",
    "#concatenate the datareader dataframes together (list passed in NOT as strings) into a single data frame\n",
    "#concat along columns (axis=1) because all DFs share the same index (the date)\n",
    "\n",
    "bank_stocks.columns.names = ['Bank Ticker','Stock Info']\n",
    "#Set the column name levels. First index level is [0], second is [1], etc."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "456cc2c2",
   "metadata": {},
   "source": [
    "Data analysis of stocks\n",
    "\n",
    "https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.xs.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa12863e",
   "metadata": {},
   "outputs": [],
   "source": [
    "bank_stocks.xs('Close', axis = 1, level='Stock Info').max()\n",
    "#Grab information from within a multilevel index using cross-section (xs)\n",
    "#Returning the max Close price for each bank's stock \n",
    "\n",
    "closep= bank_stocks.xs('Close', axis = 1, level='Stock Info').iplot()\n",
    "# Create a line plot showing Close price for each bank for the entire index of time. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d6bd5d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = plt.figure(figsize=(12,6))\n",
    "bank_stocks.xs('Close', axis = 1, level='Stock Info')['BAC'].loc['01-01-2008': '01-01-2009'].rolling(30).mean().plot(label = 'Rolling AVG')\n",
    "bank_stocks.xs('Close', axis = 1, level='Stock Info')['BAC'].loc['01-01-2008': '01-01-2009'].plot(label = 'BAC Close')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "plt.tight_layout()\n",
    "# Plot the rolling 30 day average against the Close Price for Bank Of America's stock for the year 2008"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46275b8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "closep = bank_stocks.xs('Close', axis = 1, level='Stock Info')\n",
    "closepcorr= closep.corr()\n",
    "sns.heatmap(closepcorr, cmap='coolwarm')\n",
    "#Create a heatmap of the correlation between the stocks Close Price"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ad28bc",
   "metadata": {},
   "source": [
    "Cufflinks for Technical Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "836cbeef",
   "metadata": {},
   "outputs": [],
   "source": [
    "BAC[['High', 'Low', 'Open', 'Close']].loc['01-01-2015': '01-01-2016'].iplot(kind='candle')\n",
    "#Use .iplot(kind='candle) to create a candle plot of Bank of America's stock from Jan 1st 2015 to Jan 1st 2016.\n",
    "#BAC is a DF reading financial info from yahoo\n",
    "\n",
    "df.ta_plot(study='sma') \n",
    "#create a Simple Moving Averages plot \n",
    "\n",
    "df..ta_plot(study='boll') \n",
    "#create a Bollinger Band Plot "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
